class Solution {
    public int searchInsert(int[] nums, int target) {

        // time complexity -> O(n)
        // loop 
        // check if the number >= target
        // if target not found until the end of array, return 1 more than i (nums.length)

        // for (int i = 0; i < nums.length; i++) {
        //     if (nums[i] >= target) {
        //         return i;
        //     }
        // }
        // return nums.length;      


        // binary search approach
        // time complexity -> O(logn)
        // initialize start and end
        int start = 0;
        int end = nums.length - 1;

        while (start <= end) {
            int mid = start + (end - start)/2;

            if (nums[mid] == target) return mid;
            else if (nums[mid] > target) end = mid - 1;
            else if (nums[mid] < target) start = mid + 1;
            else start = mid + 1;
        }

        return start;
    }
    // 35
}
